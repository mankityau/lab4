#include <cpen333/process/subprocess.h>
#include <cpen333/process/shared_memory.h>
#include <chrono>
#include <thread>
#include <string>
#include <iostream>

#define NUM_OF_CONCURRENT_PROCESS 2
#define CHECK_IN_DATA_NAME "CHECK_IN_DATA_NAME"

struct CheckInData{
    int val[NUM_OF_CONCURRENT_PROCESS];
};

void startProcess(int index){
    std::vector<std::string> processArg;
    processArg.push_back("./malware");
    processArg.push_back("malware" + index);
    processArg.push_back(std::to_string(index));
    cpen333::process::subprocess newProcess(processArg, true, true);
}

void updateCheckInData(int index){
    while (true){
        cpen333::process::shared_object<CheckInData> checkInData(CHECK_IN_DATA_NAME);
        checkInData->val[index] = std::rand();
    }
}

// Usage:
//    malware <name> <index>
// name is any name
// index is 0 or 1
// defaults to name:malware, index:0
int main(int argc, char *argv[]) {

    // extract name and index
    int index = 0;
    std::string name = "malware";
    if (argc > 1) {
        name = argv[1];
    }
    if (argc > 2) {
        index = std::atoi(argv[2]);
    }

    std::cout << "name: " << name << ", std::to_string(index):  " << std::to_string(index) << " started" << std::endl;
    cpen333::process::shared_object<CheckInData> checkInData(CHECK_IN_DATA_NAME);

    int oindex = (index + 1) % 2;  // index of other malware process

    int prevCheckInData = std::rand();
    checkInData->val[oindex] = prevCheckInData;

    std::thread updateThread(updateCheckInData, index);
    updateThread.detach();

    while (true) {
        std::cout << name << " " << std::to_string(index) << " running" << std::endl;
        if (prevCheckInData == checkInData->val[oindex]){
            startProcess(oindex);
        }

        prevCheckInData = checkInData->val[oindex];
        std::this_thread::sleep_for(std::chrono::seconds(1));


        //=======================================================
        // TODO: CHECK IF OTHER PROCESS MISSED CHECK-IN(S)
        //       - LAUNCH IF NOT RESPONDING
        //=======================================================


    }

    return 0;
}